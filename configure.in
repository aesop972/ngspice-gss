dnl Process this file with autoconf to produce a configure script.
AC_INIT(src/main.c)

dnl Create a configuration header
AM_CONFIG_HEADER(config.h)

dnl Initialize automake stuff
AM_INIT_AUTOMAKE(tclspice,0.2.19)

dnl --enable-ftedebug : enable frontend debug macros
AC_ARG_ENABLE(ftedebug,
    [  --enable-ftedebug        Enable ngspice frontend debug])
    
dnl --enable-ansi : try to force --ansi option to the compiler
AC_ARG_ENABLE(ansi,
    [  --enable-ansi           Force --ansi option for compilation])

dnl --disable-debug : remove -g and -Wall  option to the compiler
AC_ARG_ENABLE(debug,
    [  --enable-debug          Add -g option for compilation (default)])

dnl --enable-checker : add --with-checker-debug  option to the compiler
AC_ARG_ENABLE(checker,
    [  --enable-checkergcc     Option for compilation with checkergcc])

dnl --enable-bypass : define BYPASS for the code
AC_ARG_ENABLE(nobypass,
    [  --enable-nobypass       Don't bypass recalculations of slowly changing variables])

dnl --enable-predictor : define PREDICTOR for the code
AC_ARG_ENABLE(predictor,
    [  --enable-predictor      Enables a predictor method for convergence])

dnl --enable-sense2 : define HAVE_SENSE2 for the code
AC_ARG_ENABLE(sense2,
    [  --enable-sense2         Use spice2 sensitivity analysis])

dnl --enable-intnoise : define INT_NOISE for the code
AC_ARG_ENABLE(intnoise,
    [  --enable-intnoise       Enables noise integration in noise analysis])

dnl --enable-smoketest : a smoketest
AC_ARG_ENABLE(smoketest,
    [  --enable-smoketest      Enables smoketest compile])

dnl --enable-experimental : define EXPERIMENTAL_CODE for the code
AC_ARG_ENABLE(experimental,
    [  --enable-experimental   Enables some experimental code])

dnl --enable-ekv: define HAVE_EKV in the code. This is for EKV model support
AC_ARG_ENABLE(ekv,
    [  --enable-ekv            Enables ekv model *not in standard distribution*])

dnl --enable-xspice: define XSPICE in the code. This is for xspice support
AC_ARG_ENABLE(xspice,
    [  --enable-xspice         Enables XSpice enchancements, experimental *not in standard distribution*])

dnl --with-tcl: define TCL_MODULE in the code. This is for tcl support
AC_ARG_WITH(tcl,
    [  --with-tcl[=tcldir]         Compiles the tcl module instead, experimental, see README.Tcl])

dnl --enable-cluster: define CLUSTER in the code. This is for tcl support
AC_ARG_ENABLE(cluster,
    [  --enable-cluster     Enables cluster support, experimental *not in standard distribution*])

dnl --with-readline:  Includes GNU readline support into CLI.  Default is "yes".
dnl exclude readline libs by saying --with-readline=no at configure time.
AC_ARG_WITH(readline,
  [  --with-readline[=yes/no]   Enable GNU readline support for CLI.  Default=yes.])

dnl --enable-numparams: define NUMPARAMS in the code. This is for .param support
AC_ARG_ENABLE(numparam,
    [  --enable-numparam       Enable numparams library support, experimental *not in standard distribution*])

dnl Enable maintainer commands only if requested
AM_MAINTAINER_MODE

dnl Work on compiler options according to system:
dnl Set default CFLAG - only use -Wall if we have gcc

AC_PROG_CC

if test "x$GCC" = "xyes"; then
	CFLAGS="$CFLAGS -Wall "
fi

if test "$enable_debug" = "no"; then
	AC_MSG_WARN(Removing debugging option!)
	CFLAGS=" "
fi


dnl Not sure that this will work....
if test "$with_checkergcc" = "yes"; then
        CC="checkergcc"
fi      


dnl Checks for ANSI-C header files.
AC_HEADER_STDC

if test "$enable_ansi" = "yes"; then
	AM_PROG_CC_STDC
	if test ! "$am_cv_prog_cc_stdc"="yes"; then
	AC_MSG_WARN(Failed to find Ansi flag!)
	fi	
fi

if test "$enable_smoketest" = "yes"; then
dnl	CFLAGS="$CFLAGS -Werror"
	CFLAGS="$CFLAGS -pedantic -W -Wmissing-prototypes"
	CFLAGS="$CFLAGS -Wstrict-prototypes -Wtraditional"
	CFLAGS="$CFLAGS -Wconversion -Wshadow -Wpointer-arith"
	CFLAGS="$CFLAGS -Wcast-qual -Wcast-align -Wwrite-strings"
	CFLAGS="$CFLAGS -Waggregate-return -fshort-enums -fno-common"
	CFLAGS="$CFLAGS -Wnested-externs -Dinline= -g -O4"
fi


dnl Chech system we're on , and tune accordingly 
AC_CANONICAL_HOST

dnl
dnl The tclSpice options
dnl
if test "x$with_tcl" != "x" -a "$with_tcl" != "no" ; then
   AC_DEFINE(TCL_MODULE,1,[Tcl Module])
   with_x=no
   enable_shared=no

  AC_MSG_CHECKING([for tclConfig.sh])
  tcl_config_sh=""
  if test "x$with_tcl" != "xyes" ; then
  for dir in \
      $with_tcl
  do
    if test -r "$dir/tclConfig.sh" ; then
      tcl_config_sh="$dir/tclConfig.sh"
      break
    elif test -r "$dir/lib/tclConfig.sh" ; then
      tcl_config_sh="$dir/lib/tclConfig.sh"
      break
    elif test -r "$dir/unix/tclConfig.sh" ; then
      tcl_config_sh="$dir/unix/tclConfig.sh"
      break
    fi
  done
else 
  for dir in \
   $prefix \
   $exec_prefix 
  do
    if test -r "$dir/tclConfig.sh" ; then
      tcl_config_sh="$dir/tclConfig.sh"
      break
    elif test -r "$dir/lib/tclConfig.sh" ; then
      tcl_config_sh="$dir/lib/tclConfig.sh"
      break
    elif test -r "$dir/unix/tclConfig.sh" ; then
      tcl_config_sh="$dir/unix/tclConfig.sh"
      break
    fi
  done


  if test "x$tcl_config_sh" = "x" ; then
    for dir in \
     `ls -dr /usr/local/tcl/tcl[[7-9]].[[0-9]]* 2>/dev/null` \
     /usr/local/tcl \
     /usr/local \
     /usr
    do
      if test -r "$dir/tclConfig.sh" ; then
	tcl_config_sh="$dir/tclConfig.sh"
	break
      elif test -r "$dir/lib/tclConfig.sh" ; then
	tcl_config_sh="$dir/lib/tclConfig.sh"
	break
      fi
    done
  fi
fi

AC_MSG_RESULT([${tcl_config_sh}])

if test "x$tcl_config_sh" = "x" ; then
  echo "can't find Tcl configuration script \"tclConfig.sh\""
  exit 1
fi

. $tcl_config_sh	

CFLAGS="$CFLAGS $TCL_INCLUDE_SPEC"
CPPFLAGS="$CPPFLAGS $TCL_INCLUDE_SPEC"

AC_CHECK_HEADERS(tcl.h blt.h,,AC_MSG_ERROR(Couldn't find Tcl/BLT headers),)

if test ! -x "$TCL_EXEC_PREFIX/bin/tclsh$TCL_VERSION" ; then
AC_MSG_ERROR(Couldn't find $TCL_EXEC_PREFIX/bin/tclsh$TCL_VERSION)
fi

AC_MSG_CHECKING(for TCL module BLT)
rm -f conftest.tcl
cat > conftest.tcl << EOF
package require BLT;
exit;
EOF
if ($TCL_EXEC_PREFIX/bin/tclsh$TCL_VERSION conftest.tcl; exit) 2>/dev/null
then
   AC_MSG_RESULT(Found)
else
   AC_MSG_ERROR(Couldn't find BLT)
fi
rm -f conftest.tcl

AC_MSG_CHECKING(for TCL module tclreadline)
rm -f conftest.tcl
cat > conftest.tcl << EOF
package require tclreadline;
exit;
EOF
if ($TCL_EXEC_PREFIX/bin/tclsh$TCL_VERSION conftest.tcl; exit) 2>/dev/null
then
   AC_MSG_RESULT(Found)
else
   AC_MSG_ERROR(Couldn't find tclreadline)
fi
rm -f conftest.tcl

AC_CHECK_LIB(pthread,pthread_create)

else
  TCL_PACKAGE_PATH=""
  TCL_BUILD_LIB_SPEC=""
fi

AC_SUBST(TCL_PACKAGE_PATH)
AC_SUBST(TCL_BUILD_LIB_SPEC)


dnl Checks for programs

AC_LIBTOOL_DLOPEN
AM_PROG_LIBTOOL
AC_PROG_LIBTOOL



dnl Checks for X11 header files and libraries - X11 support can be disabled
dnl by passing the '--without-x' option to configure:

AC_PATH_X
AC_PATH_XTRA



dnl Checks for X libraries - if X11 wasn't found then don't make following
dnl tests and compile without X11 support - otherwise, check if the following
dnl libraries are present (error if they are not)


if test ! "$no_x" = "yes" ; then
	X_LIBS="$X_LIBS -lX11 -lXt"
	AC_CHECK_LIB(Xext, XShmAttach,X_LIBS="$X_LIBS -lXext",AC_MSG_ERROR(Couldn't find Xext librairies), $X_LIBS $X_EXTRA_LIBS)
	AC_CHECK_LIB(Xmu,main,X_LIBS="$X_LIBS -lXmu",AC_MSG_ERROR(Couldn't find Xmu librairies), $X_LIBS $X_EXTRA_LIBS)
	AC_CHECK_LIB(Xaw,main,X_LIBS="$X_LIBS -lXaw",AC_MSG_ERROR(Couldn't find Xaw librairies),$X_LIBS  $X_EXTRA_LIBS)


fi

dnl Check for a few typdefs:
AC_TYPE_PID_T
AC_TYPE_SIGNAL

dnl Check for a few libraries and headers:

dnl Look for ncurses first, then termcap
AC_SEARCH_LIBS(tputs,ncurses termcap,AC_DEFINE(HAVE_TERMCAP,1,[Termcap]),
               AC_MSG_ERROR(Found neither ncurses or termcap))


AC_HEADER_DIRENT
AC_CHECK_HEADERS(ctype.h unistd.h pwd.h fcntl.h string.h)
AC_HEADER_SYS_WAIT
AC_HEADER_STAT

dnl Check time and ressources headers and functions:
AC_HEADER_TIME
AC_STRUCT_TM
AC_STRUCT_TIMEZONE
AC_CHECK_FUNCS(localtime)
AC_CHECK_FUNCS(gettimeofday time ftime , break)
AC_CHECK_FUNCS(getrusage utimes, break)
AC_CHECK_FUNCS(getrlimit ulimit, break)

dnl Look for termios first (posix)
AC_CHECK_HEADERS(termios.h termio.h sgtty.h , break)
AC_CHECK_FUNCS(isatty)

dnl Check for a few functions:
AC_FUNC_VFORK
AC_CHECK_FUNCS(access bcopy qsort dup2 popen)
AC_CHECK_FUNCS(strchr index , break)
AC_CHECK_FUNCS(getcwd getwd , break)


AC_MSG_RESULT(Checking mathematical features of the system:)
dnl Look for math library:
AC_CHECK_LIB(m,sqrt)
AC_CHECK_HEADERS(float.h limits.h values.h)

dnl Check for a few mathematical functions:
AC_CHECK_FUNCS(erfc logb scalb scalbn asinh acosh atanh)

if test "$TCL_PACKAGE_PATH" = ""
then
AC_MSG_RESULT(Checking for the presence of the Garbage Collector:)
dnl Check for the garbage collector:
AC_CHECK_LIB(gc,GC_malloc,AC_DEFINE(HAVE_LIBGC,1,[Garbage Collector]) LIBS="$LIBS -lgc")
fi

dnl Check for the asprintf function:
AC_CHECK_FUNCS(asprintf)

dnl Check for va_copy
AC_CACHE_CHECK([for va_copy], ac_cv_c_va_copy,
 AC_TRY_LINK(
   [#include <stdarg.h>],
   [va_list ap1, ap2;
    va_copy(ap1,ap2); 
   ],
   [ac_cv_c_va_copy="yes"],
   [ac_cv_c_va_copy="no"])
 )
if test "$ac_cv_c_va_copy" = "yes"
then 
    AC_DEFINE(HAVE_VA_COPY, 1, [Define if we have va_copy])
fi
AC_CACHE_CHECK([for __va_copy], ac_cv_c___va_copy,
 AC_TRY_LINK(   
   [#include <stdarg.h>],
   [va_list ap1, ap2;
    __va_copy(ap1,ap2);
   ],
   [ac_cv_c___va_copy="yes"],
   [ac_cv_c___va_copy="no"])
 )
if test "$ac_cv_c___va_copy" = "yes"
then
    AC_DEFINE(HAVE___VA_COPY, 1, [Define if we have __va_copy])
fi

# Expand the prefix variable (this is really annoying!)
if eval "test x$prefix = xNONE"; then
 dprefix=$ac_default_prefix
else
 dprefix=$prefix
fi

AC_DEFINE_UNQUOTED(NGSPICEBINDIR, "`echo $dprefix/bin`" ,[Binary Directory])
AC_DEFINE_UNQUOTED(NGSPICEDATADIR, "`echo $dprefix/share/${PACKAGE}`",[Data dir] )
AC_DEFINE_UNQUOTED(NGSPICEBUILDDATE, "`date`" , [Build Date])


# Recapitulate settings:
AC_MSG_RESULT(Settings which were chosen:)
if test "$enable_sense2" = "yes"; then
	AC_DEFINE(WANT_SENSE2,1,[Sense2 support])
	AC_MSG_RESULT(Spice2 sensitivity analysis enabled)	
fi
if test "$enable_nobypass" = "yes"; then
	AC_DEFINE(NOBYPASS,1,[Nobypass option])
	AC_MSG_RESULT(NOBYPASS option enabled)	
fi
if test "$enable_predictor" = "yes"; then
	AC_DEFINE(PREDICTOR,1,[Predictor support])
	AC_MSG_RESULT(PREDICTOR algorithm enabled)	
fi
if test "$enable_intnoise" = "yes"; then
	AC_DEFINE(INT_NOISE,1,[intnoise support])
	AC_MSG_RESULT(Noise integration enabled)
fi
if test "$enable_experimental" = "yes"; then
	AC_DEFINE(EXPERIMENTAL_CODE,1,[Experimantal Code])
	AC_MSG_RESULT(EXPERIMENTAL_CODE enabled)	
fi

if test "$enable_ftedebug" = "yes"; then
	AC_DEFINE(FTEDEBUG,1,[Frountend debugging])
	AC_MSG_RESULT(WARNING: Frontend debug is enabled)	
fi


if test "$enable_ekv" = "yes"; then
    AC_MSG_RESULT(Model EKV included)
    AC_DEFINE(HAVE_EKV,1,[EKV model])
    EKVDIR="ekv"
    EKVLIB="spicelib/devices/ekv/libekv.la"
else
    EKVDIR=""
    EKVLIB=""	
fi
AC_SUBST(EKVDIR)
AC_SUBST(EKVLIB)

dnl Add new code models to the build by pointing to them here.
if test "$enable_xspice" = "yes"; then
    AC_MSG_RESULT(X-Spice features included)
    AC_DEFINE(XSPICE,1,[Xspice additions])
    AC_PROG_YACC
    AM_PROG_LEX
    XSPICEDIR="xspice"
    XSPICELIB1="$XSPICEDIR/cm/libcmxsp.a \
    		$XSPICEDIR/mif/libmifxsp.a"
    XSPICELIB2="$XSPICEDIR/evt/libevtxsp.a \
                $XSPICEDIR/enh/libenhxsp.a \
	        $XSPICEDIR/ipc/libipcxsp.a \
		$XSPICEDIR/idn/libidnxsp.a \
		-ldl"

else
    XSPCIEDIR=""
    XSPICELIB1=""
    XSPICELIB2=""
fi
AC_SUBST(XSPICEDIR)
AC_SUBST(XSPICELIB1)
AC_SUBST(XSPICELIB2)

dnl Cluster option
if test "$enable_cluster" = "yes"; then
   AC_MSG_RESULT(Cluster version is being compiled)
   AC_DEFINE(CLUSTER,1,[Cluster code])
   LIBS="$LIBS -lpthread"   
fi

if test "$enable_numparam" = "yes"; then
    AC_MSG_RESULT(Numparam library is enabled)
    AC_DEFINE(NUMPARAMS,1,[Numparam library])
    NUMPARAMDIR="numparam"
    NUMPARAMLIB="frontend/numparam/libnumparam.a"
else
    NUMPARAMDIR=""
    NUMPARAMLIB=""	
fi
AC_SUBST(NUMPARAMDIR)
AC_SUBST(NUMPARAMLIB)

dnl  ----  Option to include GNU readline support in ngspice CLI  ----
if test "$with_readline" != "no" -a \
	\( "x$with_tcl" == "x" -o "$with_tcl" == "no" \) ; then
    AC_MSG_RESULT(Checking for readline:)
    AC_CHECK_HEADERS([readline/readline.h readline/history.h], 
                     [AC_DEFINE(HAVE_GNUREADLINE,1,[GNUreadline])],
                     [AC_MSG_ERROR(Couldn't find GNU readline headers.)]) 
    AC_CHECK_LIB(readline, readline, 
                     [LIBS="$LIBS -lreadline"],
                     [AC_MSG_ERROR(Couldn't find readline libraries.)]) 
else 
    AC_MSG_RESULT(GNU readline disabled.)
fi

AC_OUTPUT(			\
Makefile			\
doc/Makefile			\
man/Makefile			\
man/man1/Makefile		\
src/Makefile			\
src/spinit			\
src/spicelib/Makefile		\
src/spicelib/analysis/Makefile	\
src/spicelib/devices/Makefile		\
src/spicelib/devices/asrc/Makefile	\
src/spicelib/devices/bjt/Makefile	\
dnl           src/spicelib/devices/bjt2/Makefile	\
src/spicelib/devices/bsim1/Makefile	\
src/spicelib/devices/bsim2/Makefile	\
src/spicelib/devices/bsim3v1/Makefile	\
src/spicelib/devices/bsim3/Makefile	\
src/spicelib/devices/bsim4/Makefile	\
src/spicelib/devices/bsim3v2/Makefile	\
src/spicelib/devices/bsim3soi_pd/Makefile \
src/spicelib/devices/bsim3soi_fd/Makefile \
src/spicelib/devices/bsim3soi_dd/Makefile \
src/spicelib/devices/cap/Makefile	\
src/spicelib/devices/cccs/Makefile	\
src/spicelib/devices/ccvs/Makefile	\
src/spicelib/devices/csw/Makefile	\
src/spicelib/devices/cpl/Makefile       \
src/spicelib/devices/dio/Makefile	\
dnl            src/spicelib/devices/ekv/Makefile	\
src/spicelib/devices/ind/Makefile	\
src/spicelib/devices/isrc/Makefile	\
src/spicelib/devices/hfet1/Makefile	\
src/spicelib/devices/hfet2/Makefile	\
src/spicelib/devices/jfet/Makefile	\
src/spicelib/devices/jfet2/Makefile	\
src/spicelib/devices/ltra/Makefile	\
src/spicelib/devices/mes/Makefile	\
src/spicelib/devices/mesa/Makefile      \
src/spicelib/devices/mos1/Makefile	\
src/spicelib/devices/mos2/Makefile	\
src/spicelib/devices/mos3/Makefile	\
src/spicelib/devices/mos6/Makefile	\
src/spicelib/devices/mos9/Makefile	\
src/spicelib/devices/res/Makefile	\
src/spicelib/devices/soi3/Makefile	\
src/spicelib/devices/sw/Makefile	\
src/spicelib/devices/tra/Makefile	\
src/spicelib/devices/txl/Makefile       \
src/spicelib/devices/urc/Makefile	\
src/spicelib/devices/vccs/Makefile	\
src/spicelib/devices/vcvs/Makefile	\
src/spicelib/devices/vsrc/Makefile	\
src/spicelib/parser/Makefile	\
src/frontend/Makefile		\
src/frontend/numparam/Makefile	\
src/frontend/help/Makefile	\
src/frontend/parser/Makefile	\
src/frontend/plotting/Makefile	\
src/include/Makefile		\
src/maths/Makefile		\
src/maths/cmaths/Makefile	\
src/maths/ni/Makefile		\
src/maths/deriv/Makefile	\
src/maths/poly/Makefile		\
src/maths/sparse/Makefile	\
src/misc/Makefile		\
src/xspice/Makefile		\
src/xspice/cm/Makefile		\
src/xspice/cmpp/Makefile	\
src/xspice/icm/makedefs		\
src/xspice/mif/Makefile		\
src/xspice/evt/Makefile		\
src/xspice/enh/Makefile		\
src/xspice/ipc/Makefile		\
src/xspice/idn/Makefile		\
tests/Makefile			\
tests/filters/Makefile		\
tests/polezero/Makefile		\
tests/resistance/Makefile	\
tests/bsim3soipd/Makefile	\
tests/bsim3soifd/Makefile	\
tests/bsim3soidd/Makefile	\
tests/bsim4/Makefile		\
tests/mesa/Makefile		\
tests/TransImpedanceAmp/Makefile
)

dnl Printout Tcl option
if test "x$with_tcl" != "x" -a "$with_tcl" != "no" ; then
   echo 'Tcl module being made, use "make tcl" and "make install-tcl", read README.Tcl'
fi
