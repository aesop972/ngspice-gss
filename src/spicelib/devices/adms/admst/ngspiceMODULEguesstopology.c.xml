<?xml version="1.0" encoding="ISO-8859-1"?>

<!--
  $Id: ngspiceMODULEguesstopology.c.xml,v 1.5 2006/03/03 08:41:41 r29173 Exp $
  $Log: ngspiceMODULEguesstopology.c.xml,v $
  Revision 1.5  2006/03/03 08:41:41  r29173
  add missing xml code (computation of $function)

  Revision 1.4  2006/03/02 08:53:51  r29173
  started implementing of functions $simparam(), $given(), analysis()

  Revision 1.3  2006/02/21 08:05:18  dwarning
  Introduction of alias names for modules to prevent cryptic naming.

  Revision 1.2  2006/02/02 17:56:31  pnenzi

  Changed adms required version to 2.1.3 ,J

  Revision 1.1  2006/01/31 17:53:48  pnenzi

  Initial import for admst (Verilog-AMS) translators for ngspice.

-->

<!--
     Written by Laurent Lemaitre - r29173@users.sourceforge.net
     Documentation:
       http://sourceforge.net/docman/display_doc.php?docid=18993&group_id=84289
     Target Interface: ngspice
     Supported by adms-1.x.x
     This file is used by adms - http://sourceforge.net/projects/mot-adms.
     adms is free software; you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation; either version 2 of the License, or
     (at your option) any later version.
     adms is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.
     You should have received a copy of the GNU General Public License
     along with adms; if not, write to the Free Software
     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-->

<!DOCTYPE admst SYSTEM "admst.dtd">
<admst version="2.1.3" xmlns:admst="http://mot-adms.sourceforge.net/xml-files/admst">

<!-- expression//function: mapping verilog-name == C-name of function -->
<admst:template match="function:getname">
  <admst:choose>
    <admst:when test="[name='abs']"><admst:value-of select="'fabs'"/></admst:when>
    <admst:when test="[name='$shrinkl']"><admst:value-of select="'shrinkl'"/></admst:when>
    <admst:when test="[name='$shrinka']"><admst:value-of select="'shrinka'"/></admst:when>
    <admst:when test="[name='log']"><admst:value-of select="'log10'"/></admst:when>
    <admst:when test="[name='ln']"><admst:value-of select="'log'"/></admst:when>
    <admst:when test="[name='limexp']"><admst:value-of select="'limexp'"/></admst:when>
    <admst:when test="[name='$limexp']"><admst:value-of select="'limexp'"/></admst:when>
    <admst:when test="[name='$model']"><admst:value-of select="'_modelname'"/></admst:when>
    <admst:when test="[name='$instance']"><admst:value-of select="'_instancename'"/></admst:when>
    <admst:when test="[name='$temperature']"><admst:value-of select="'_circuit_temp'"/></admst:when>
    <admst:when test="[name='$nominal_temperature']"><admst:value-of select="'_circuit_tnom'"/></admst:when>
    <admst:otherwise><admst:value-of select="name"/></admst:otherwise>
  </admst:choose>
</admst:template>

<admst:template match="function">
  <admst:value-of select="name"/>
  <admst:variable name="function" select="%s"/>
  <admst:variable name="args" select=""/>
  <admst:for-each select="arguments">
    <admst:if test="[not($args='')]">
      <admst:variable name="args" select="$args,"/>
    </admst:if>
    <admst:apply-templates select="." match="subexpression:stringify:noprobe"/>
    <admst:variable name="args" select="$args%s"/>
  </admst:for-each>
  <admst:choose>
    <admst:when test="[name='$simparam']">
      <admst:error format="$function($args) -- not done\n"/>
      <admst:value-to select="/simulator/tmp" value="1.0"/>
    </admst:when>
    <admst:when test="[name='analysis']">
      <admst:error format="'$function($args) -- not done\n"/>
      <admst:value-to select="/simulator/tmp" value="1.0"/>
    </admst:when>
    <admst:when test="[name='$given']">
      <admst:for-each select="arguments[position(.)=1]">
        <admst:if test="adms[datatypename!='variable']">
          <admst:error format="$given: argument is not a variable\n"/>
        </admst:if>
        <admst:if test="[input='no']">
          <admst:value-of select="name"/>
          <admst:error format="$given(%s): argument is not a parameter\n"/>
        </admst:if>
        <admst:choose>
          <admst:when test="[parametertype='model']">
            <admst:value-of select="name"/>
            <admst:value-to select="/simulator/tmp" value="model->%s_Given"/>
          </admst:when>
          <admst:when test="[parametertype='instance']">
            <admst:value-of select="name"/>
            <admst:value-to select="/simulator/tmp" value="here->%s_Given"/>
          </admst:when>
          <admst:otherwise>
            <admst:error format="$given(%s): should not be reached\n"/>
          </admst:otherwise>
        </admst:choose>
      </admst:for-each>
      <admst:if test="/simulator/probe">
        <admst:value-to select="/simulator/ddx" value="0.0"/>
      </admst:if>
    </admst:when>
    <admst:otherwise>
      <admst:variable name="mycode" select=""/>
      <admst:if test="[not(nilled(arguments))]">
        <admst:for-each select="arguments">
          <admst:apply-templates select="." match="subexpression:stringify:noprobe"/>
          <admst:choose>
            <admst:when test="[$mycode='']">
              <admst:variable name="mycode" select="%s"/>
            </admst:when>
            <admst:otherwise>
              <admst:variable name="mycode" select="$mycode,%s"/>
            </admst:otherwise>
          </admst:choose>
        </admst:for-each>
        <admst:variable name="mycode" select="($mycode)"/>
      </admst:if>
      <admst:apply-templates select="." match="function:getname"/>
      <admst:variable name="mycode" select="%s$mycode"/>
      <admst:value-to select="/simulator/tmp" value="$mycode"/>
    </admst:otherwise>
  </admst:choose>

</admst:template>

<admst:template match="guesstopology:variable:declaration">
  <admst:for-each select="module/evaluation/variable">
    <admst:assert test="adms[datatypename='variable']" format="expecting datatypename=variable\n"/>
    <admst:if test="[scope='local' and OPdependent='no']">
      <admst:value-of select="name"/>
      <admst:if test="[type='integer']">int %s;\n</admst:if>
      <admst:if test="[type='real']">double %s=0.0/0.0;\n</admst:if>
      <admst:if test="[type='string']">char* %s;\n</admst:if>
    </admst:if>
  </admst:for-each>
  <admst:reset select="module/evaluation/variable"/>
</admst:template>

<admst:template match="guesstopology">
  <admst:choose>

    <admst:when test="admst(.)/absolute[datatypefamily='basictype']"/>
    <admst:when test="adms[datatypename='callfunction']"/>

    <admst:when test="adms[datatypename='whileloop']">
      <admst:apply-templates select="whileblock" match="guesstopology"/>
      <admst:apply-templates select="while" match="guesstopology"/>
    </admst:when>

    <admst:when test="adms[datatypename='conditional']">
      <admst:if test="if[nilled(variable[OPdependent='yes'])]">
        <admst:apply-templates select="if" match="guesstopology"/>
        <admst:choose>
          <admst:when test="if/math[dependency='constant']">
            <admst:apply-templates select="if" match="expression:stringify:noprobe"/>
            <admst:text format="if\n(%s)\n"/>
            <admst:text format="{\n"/>
            <admst:apply-templates select="then" match="guesstopology"/>
            <admst:text format="}\n"/>
            <admst:if test="[not(nilled(else))]">
              <admst:text format="else\n"/>
              <admst:text format="{\n"/>
              <admst:apply-templates select="else" match="guesstopology"/>
              <admst:text format="}\n"/>
            </admst:if>
          </admst:when>
          <admst:otherwise>
            <admst:apply-templates select="then" match="guesstopology"/>
            <admst:apply-templates select="else" match="guesstopology"/>
          </admst:otherwise>
        </admst:choose>
      </admst:if>
    </admst:when>

    <admst:when test="adms[datatypename='contribution']">
      <admst:value-of select="lhs/discipline/potential"/>
      <admst:if test="lhs[nature='%p']">
        <admst:choose>
          <admst:when test="lhs/branch[grounded='no']">
            <admst:if test="lhs/branch/nnode[location='internal']">
              <admst:value-of select="lhs/branch/pnode/name"/>
              <admst:value-of select="lhs/branch/nnode/name"/>
              <admst:text format="here->%sNode = here->%sNode; /* nnode collapsed */ \n"/>
            </admst:if>
            <admst:if test="lhs/branch/pnode[location='internal']">
              <admst:value-of select="lhs/branch/nnode/name"/>
              <admst:value-of select="lhs/branch/pnode/name"/>
              <admst:text format="here->%sNode = here->%sNode; /* pnode collapsed */ \n"/>
            </admst:if>
          </admst:when>
          <admst:otherwise>
            <admst:value-of select="lhs/branch/pnode/name"/>
            <admst:text format="here->%sNode = 0; /* pnode collapsed to GND */ \n"/>
          </admst:otherwise>
        </admst:choose>
      </admst:if>
      <admst:for-each select="rhs/probe">
        <admst:choose>
          <admst:when test="../..[static='yes']">
            <admst:text format="  static_"/>
          </admst:when>
          <admst:when test="../..[dynamic='yes']">
            <admst:text format="  dynamic_"/>
          </admst:when>
          <admst:when test="../..[whitenoise='yes']">
            <admst:text format="  whitenoise_"/>
          </admst:when>
          <admst:when test="../..[flickernoise='yes']">
            <admst:text format="  flickernoise_"/>
          </admst:when>
          <admst:otherwise/>
        </admst:choose>
        <admst:choose>
          <admst:when test="branch/nnode[grounded='no']">
            <admst:if test="../../lhs/branch/nnode[grounded='no']">
              <admst:value-of select="branch/nnode/name"/>
              <admst:value-of select="branch/pnode/name"/>
              <admst:value-of select="../../lhs/branch/nnode/name"/>
              <admst:value-of select="../../lhs/branch/pnode/name"/>
              <admst:text format="jacobian4(%s,%s,%s,%s)\n"/>
            </admst:if>
            <admst:if test="../../lhs/branch/nnode[grounded='yes']">
              <admst:value-of select="branch/nnode/name"/>
              <admst:value-of select="branch/pnode/name"/>
              <admst:value-of select="../../lhs/branch/pnode/name"/>
              <admst:text format="jacobian2p(%s,%s,%s)\n"/>
            </admst:if>
          </admst:when>
          <admst:otherwise>
            <admst:if test="../../lhs/branch/nnode[grounded='no']">
              <admst:value-of select="branch/pnode/name"/>
              <admst:value-of select="../../lhs/branch/nnode/name"/>
              <admst:value-of select="../../lhs/branch/pnode/name"/>
              <admst:text format="jacobian2s(%s,%s,%s)\n"/>
            </admst:if>
            <admst:if test="../../lhs/branch/nnode[grounded='yes']">
              <admst:value-of select="branch/pnode/name"/>
              <admst:value-of select="../../lhs/branch/pnode/name"/>
              <admst:text format="jacobian1(%s,%s)\n"/>
            </admst:if>
          </admst:otherwise>
        </admst:choose>
      </admst:for-each>
    </admst:when>

    <admst:when test="adms[datatypename='assignment']">
      <admst:if test="math[dependency='constant']">
        <admst:if test="lhs[insource='yes' and OPdependent='no']">
          <admst:apply-templates select="lhs" match="variable:lhs"/>
          <admst:apply-templates select="rhs" match="expression:stringify:noprobe"/>
          <admst:text format="=%s;\n"/>
        </admst:if>
      </admst:if>
    </admst:when>

    <admst:when test="adms[datatypename='block']">
      <admst:for-each select="item">
        <admst:apply-templates select="." match="guesstopology"/>
      </admst:for-each>
    </admst:when>

    <admst:when test="adms[datatypename='expression']"/>
    <admst:when test="adms[datatypename='probe']"/>
    <admst:when test="adms[datatypename='variable']"/>
    <admst:when test="adms[datatypename='mapply_unary']"/>
    <admst:when test="adms[datatypename='mapply_binary']"/>
    <admst:when test="adms[datatypename='mapply_ternary']"/>
    <admst:when test="adms[datatypename='function']"/>
    <admst:when test="adms[datatypename='number']"/>
    <admst:when test="adms[datatypename='string']"/>

    <admst:otherwise>
      <admst:value-of select="admst(.)/absolute/datatypename"/>
      <admst:value-of select="admst(.)/absolute/datatypefamily"/>
      <admst:error format="%s.%s: not handled\n"/>
    </admst:otherwise>
  </admst:choose>
</admst:template>

<admst:template match="analog:guesstopology">
  <admst:if test="code">
    <admst:assert test="code/adms[datatypename='block']" format="expecting datatypename=block\n"/>
    <admst:for-each select="code/item">
      <admst:if test="adms[datatypename='block']">
        <admst:if test="[name!='initial_model' and name!='initial_instance'
           and name!='initial_step' and name!='noise']">
          <admst:apply-templates select="." match="block:local:declaration"/>
        </admst:if>
      </admst:if>
      <admst:if test="adms[datatypename!='block']">
        <admst:apply-templates select="." match="block:local:declaration"/>
      </admst:if>
    </admst:for-each>
    <admst:apply-templates select="code" match="guesstopology:variable:declaration"/>
    <admst:for-each select="code/item">
      <admst:choose>
        <admst:when test="adms[datatypename!='block']">
          <admst:apply-templates select="." match="guesstopology"/>
        </admst:when>
        <admst:otherwise>
          <admst:if test="[name!='initial_model' and name!='initial_instance'
             and name!='initial_step' and name!='noise']">
            <admst:apply-templates select="." match="guesstopology"/>
          </admst:if>
        </admst:otherwise>
      </admst:choose>
    </admst:for-each>
  </admst:if>
</admst:template>

<admst:template match="code">
<admst:value-of select="attribute[name='ngspicename']/value"/>
<admst:variable name="module" select="%s"/>

#include &quot;ngspice.h&quot;
#include &quot;cktdefs.h&quot;
#include &quot;smpdefs.h&quot;
#include &quot;$(module)defs.h&quot;
#include &quot;const.h&quot;
#include &quot;sperror.h&quot;
#include &quot;ifsim.h&quot;
#include &quot;suffix.h&quot;

#define jacobian(a,b) here->PTR_J_##a##_##b##_required=1;
#define static_jacobian4(p,q,r,s)  jacobian(p,r) jacobian(p,s) jacobian(q,r) jacobian(q,s)
#define static_jacobian2s(p,q,r)   jacobian(p,r) jacobian(q,r)
#define static_jacobian2p(p,r,s)   jacobian(p,r) jacobian(p,s)
#define static_jacobian1(p,r)      jacobian(p,r)
#define dynamic_jacobian4(p,q,r,s) jacobian(p,r) jacobian(p,s) jacobian(q,r) jacobian(q,s)
#define dynamic_jacobian2s(p,q,r)  jacobian(p,r) jacobian(q,r)
#define dynamic_jacobian2p(p,r,s)  jacobian(p,r) jacobian(p,s)
#define dynamic_jacobian1(p,r)     jacobian(p,r)
#define whitenoise_jacobian4(p,q,r,s)
#define whitenoise_jacobian2s(p,q,r)
#define whitenoise_jacobian2p(p,r,s)
#define whitenoise_jacobian1(p)
#define flickernoise_jacobian4(p,q,r,s)
#define flickernoise_jacobian2s(p,q,r)
#define flickernoise_jacobian2p(p,r,s)
#define flickernoise_jacobian1(p)


int $(module)guesstopology (SMPmatrix *matrix, CKTcircuit *ckt, $(module)model *model, $(module)instance *here)
     /* guess topology */
{
<admst:apply-templates select="analog" match="analog:guesstopology"/>
  return(OK);
}

</admst:template>

<admst:for-each select="/module">
  <admst:value-of select="attribute[name='ngspicename']/value"/>
  <admst:open file="%sguesstopology.c">
    <admst:value-of select="/simulator/package_string"/>
    <admst:text format="/***\n*** Interface: %s\n"/>
    <admst:value-of select="/simulator/currentdate"/>
    <admst:value-of select="/simulator/fullname"/>
    <admst:text format=" *** created by: %s - %s ***/\n"/>
    <admst:apply-templates select="." match="code"/>
  </admst:open>
  <admst:value-of select="attribute[name='ngspicename']/value"/>
  <admst:message format="%sguesstopology.c: file created\n"/>
</admst:for-each>

</admst>
